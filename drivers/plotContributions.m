%% preamble
clear all; close all; clc; 
utils.call.paths;

envi = environment.setup();

cd(fullfile(project_path, 'models'));

% Declaring model names
modelList = ["Model_HumanCapital_epsi_ig" ...
    , "Model_HumanCapital_epsi_cge" ...
    , "Model_HumanCapital_epsi_cgrd" ...
    ];

aItemList = ["yd"];

%% ----------------
% Loading the databases
% ----------------

% Initialize an empty structure to hold results
resultsProc = struct();

% Loop through each model and load data
for aModel = modelList
    % Load the model data
    resultsRaw = load(fullfile(project_path, 'models', aModel, 'Output', [char(aModel) '_results.mat']));
    dataRange = qq(0, 4): qq(0, 4) + size(resultsRaw.oo_.endo_simul', 1) - 1;
    
    % Store endogenous and steady state variables
    resultsProc.(aModel).endo = databank.fromArray( ...
        resultsRaw.oo_.endo_simul', ...
        resultsRaw.M_.endo_names, ...
        dataRange(1) ...
    );
    
    % Handle SS values
    resultsProc.(aModel).ss = databank.fromArray( ...
        repmat(resultsRaw.oo_.steady_state', numel(dataRange), 1), ...
        resultsRaw.M_.endo_names, ...
        dataRange(1) ...
    );
    
    % Handle parameters
    for aParam = string(reshape(resultsRaw.M_.param_names, 1, []))
        resultsProc.(aModel).param.(aParam) = resultsRaw.M_.params(strcmp(aParam, resultsRaw.M_.param_names));
    end
    
    % Calculate IRF transformations
    serIndex = cellfun(@(x) any(endsWith(x, {'effshock', 'effgeshock'})), resultsRaw.M_.endo_names);
    
    resultsProc.(aModel).irf = databank.copy( ...
        resultsProc.(aModel).endo, ...
        "Transform", @(x) (x/x(qq(0, 4))-1)*100, ...
        "SourceNames", resultsRaw.M_.endo_names(~serIndex) ...
    );
    
    resultsProc.(aModel).irf = databank.copy( ...
        resultsProc.(aModel).endo, ...
        "SourceNames", resultsRaw.M_.endo_names(serIndex), ...
        "Transform", @(x) (x-x(qq(0, 4))), ...
        "TargetDb", resultsProc.(aModel).irf ...
    );
end

%% calculating the contributions

for aModel = modelList

    allItemList = aItemList;
    
    resultsRaw = load(fullfile(project_path, 'models', char(aModel), 'Output', [char(aModel), '_results.mat']));
    
    for aItem = aItemList
        [ ...
            contributionSeries.(aModel).total.(aItem) ...
            , contributionSeries.(aModel).contrib.(aItem) ...
            , contributionSeries.(aModel).lhs.(aItem) ...
            ] = utils.subroutines.createContributions( ...
                resultsRaw.M_ ...
                , char(aItem) ... 
                , utils.subroutines.Series2Dseries(resultsProc.(aModel).endo) ...
                , utils.subroutines.Series2Dseries(resultsProc.(aModel).ss) ...
            );
        allItemList = [allItemList, contributionSeries.(aModel).contrib.(aItem).Comment];
    end
    allItemList = unique(allItemList);

    colorTable = table( ...
    'Size',[numel(unique(allItemList)), 1] ...
    , 'VariableTypes', {'cell'} ...
    , 'VariableNames',{'colorIndex'} ...
    , 'RowNames',unique(allItemList) ...
    );
    colormapSaved = utils.subroutines.linspecer(numel(unique(allItemList)));
    for aItemIndex = 1:numel(unique(allItemList))
        colorTable{aItemIndex, 1} = {colormapSaved(aItemIndex, :)};
    end
    contributionSeries.(aModel).colorTable = colorTable;

end


%% investigating interest rate reaction upon the request from Sandra
panelContributions("Model_HumanCapital_epsi_ig", contributionSeries, project_path);
% panelContributionsSlide(contributionSeries,g projectPath, subProjectPath);

%%
panelContributionsManyModels(modelList, contributionSeries, project_path)

%%
function panelContributions(aModel, contributionSeriesAllModels, projectPath)

    % Specify the model
    contributionSeries = contributionSeriesAllModels.(aModel);

    % Please specify the list of the variables to plot   
    VarListToPlot = string(reshape(fieldnames(contributionSeries.total), 1, []));
    
    % Please specify the date range of the series
    DateRange = qq(1,1):qq(5,4);
    aShift = 0;
    DateRangeNorm = DateRange - aShift;
    DateRangeDateTime = dater.toMatlab(DateRangeNorm);
    
    % Plotting
    figure
    
    % Defining the shape of the figure
    tiledlayout_width = 3; %Specify the # of columns desired
    tiledlayout_height = 2;
    
    t = tiledlayout(tiledlayout_height, tiledlayout_width, 'TileSpacing', 'compact','Padding','compact');
    
    h = gcf;
    FigureHeight = min(29.7, tiledlayout_height*6.5);
    set(h, 'Units','centimeters', 'Position',[0 0 21-2*2.5 20-2*2.5])
    set(h,'defaulttextinterpreter','latex');
    
    for aItem = VarListToPlot %for each panel
        nexttile;
        grid on
        hold on 
    
        % Seeting of the title
        aTitle = sprintf('Decomposition of %s', contributionSeries.lhs.(aItem));        
        title( ...
            aTitle ...
            , 'Fontsize', 7 ...
            , 'Fontweight', 'normal' ...
        );
    
        % actual data
        bars_ = barcon( ...
            DateRange ...
            , contributionSeries.contrib.(aItem) ...
            , "ColorMap", cell2mat(contributionSeries.colorTable{contributionSeries.contrib.(aItem).Comment, :}) ...
            , 'EdgeColor', 'none');
        % targets
        line_ = plot( ...
            DateRange ...
            , contributionSeries.total.(aItem) ...
            , 'color', cell2mat(contributionSeries.colorTable{aItem, :}) ...
            , 'linewidth', 2 ...
            , 'Marker', '_' ...
            , 'MarkerFaceColor', utils.subroutines.rgb('black') ...
            , 'MarkerEdgeColor', utils.subroutines.rgb('black') ...
            , 'MarkerSize', 4 ...
            );
        
        hold off
    
        % Setting of the x and y axis
        xtickformat(gca,'yyQQQ')
    
        set(gca ...
            , 'Xtick', DateRangeDateTime(1:4:end) ...
            , 'Fontsize', 7 ...
            , 'Box', 'off' ...
            , 'TickLabelInterpreter','latex' ...
        );
    
        legendLabels = replace([contributionSeries.contrib.(aItem).Comment, aItem], "_", "\_");
        legend( ...
            [bars_, line_] ...
            , legendLabels ...
            , 'location', 'northoutside' ...
            , 'Interpreter','latex' ...
            , 'Fontsize', 6 ...
            , 'NumColumns', 2 ...
            );
    
    
    end 
        
    % Save graph
    fileName = fullfile(projectPath, "docs/contributions/contrib" + aModel);
    exportgraphics(t, sprintf('%s.png',fileName),'BackgroundColor','none');
end

function panelContributionsManyModels(modelList, contributionSeriesAllModels, projectPath)

    % Specify the model
    contributionSeries = contributionSeriesAllModels;

    % Please specify the list of the variables to plot   
    VarListToPlot = string(reshape(fieldnames(contributionSeries.(modelList(1)).total), 1, []));
    
    % Please specify the date range of the series
    DateRange = qq(1,1):qq(50,4);
    aShift = 0;
    DateRangeNorm = DateRange - aShift;
    DateRangeDateTime = dater.toMatlab(DateRangeNorm);
    
    % Plotting
    figure
    
    % Defining the shape of the figure
    tiledlayout_width = 3; %Specify the # of columns desired
    tiledlayout_height = 2;
    
    t = tiledlayout(tiledlayout_height, tiledlayout_width, 'TileSpacing', 'compact','Padding','compact');
    
    h = gcf;
    FigureHeight = min(29.7, tiledlayout_height*6.5);
    set(h, 'Units','centimeters', 'Position',[0 0 21-2*2.5 20-2*2.5])
    set(h,'defaulttextinterpreter','latex');
    

    for aItem = VarListToPlot %for each panel

        for aModel = modelList

            nexttile;
            grid on
            hold on 
        
            % Seeting of the title
            aTitle = sprintf('Decomposition of %s', contributionSeries.(aModel).lhs.(aItem));        
            title( ...
                aTitle ...
                , 'Fontsize', 7 ...
                , 'Fontweight', 'normal' ...
            );
        
            % actual data
            bars_ = barcon( ...
                DateRange ...
                , contributionSeries.(aModel).contrib.(aItem) ...
                , "ColorMap", cell2mat(contributionSeries.(aModel).colorTable{contributionSeries.(aModel).contrib.(aItem).Comment, :}) ...
                , 'EdgeColor', 'none');
            % targets
            line_ = plot( ...
                DateRange ...
                , contributionSeries.(aModel).total.(aItem) ...
                , 'color', cell2mat(contributionSeries.(aModel).colorTable{aItem, :}) ...
                , 'linewidth', 2 ...
                , 'Marker', '.' ...
                , 'MarkerFaceColor', utils.subroutines.rgb('black') ...
                , 'MarkerEdgeColor', utils.subroutines.rgb('black') ...
                , 'MarkerSize', 4 ...
                );
            
            hold off
        
            % Setting of the x and y axis
            xtickformat(gca,'yyQQQ')
        
            set(gca ...
                , 'Xtick', DateRangeDateTime(1:40:end) ...
                , 'Fontsize', 7 ...
                , 'Box', 'off' ...
                , 'TickLabelInterpreter','latex' ...
            );
        
            legendLabels = replace([contributionSeries.(aModel).contrib.(aItem).Comment, aItem], "_", "\_");
            legend( ...
                [bars_, line_] ...
                , legendLabels ...
                , 'location', 'northoutside' ...
                , 'Interpreter','latex' ...
                , 'Fontsize', 6 ...
                , 'NumColumns', 2 ...
                );
        
        
        end 

    end
        
    % Save graph
    fileName = fullfile(projectPath, "docs/contributions/panelContributionsManyModels");
    exportgraphics(t, sprintf('%s.png',fileName),'BackgroundColor','none');
end